using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Serialization;  
using UnityEngine.SceneManagement;

public class Obi_Script : MonoBehaviour
{
    [Range(0,1)]
    public float FloatingSpeed;
    public enum ObiStates { RUTA1, STOP1, RUTA2, STOP2, RUTA3, STOP3, AVISO, INICIO_SALTO, JR1,JR2,JR3,JR4,JR5,JR6,RELOAD }
    public ObiStates State;
    public GameObject ObiAnimObj, VR_CAM;
    public AudioSource Movidito;
    public CelulaManager_Script Manager;
    public List<GameObject> R1, R2, R3, STOPS,RJump,DialogosObi;
    public float Speed, RSpeed, Radius, StopClock,TimeJump;
    private int CureentWayPoint,JRCount;
    private bool Floating;
    public bool Salto;

    // Use this for initialization
    void Start()
    {

    }

    // Update is called once per frame
    void Update()
    {
        //print(CureentWayPoint);
        //HitInfo = Physics2D.Linecast(transform.position, Target.transform.position, ViewMask);
        //Debug.DrawLine(transform.position, HitInfo.point, Color.green);
        

        if (ObiAnimObj.transform.localPosition == new Vector3(ObiAnimObj.transform.localPosition.x, 0.10f, ObiAnimObj.transform.localPosition.z))
        {
            Floating = false;
        }

        if (ObiAnimObj.transform.localPosition == new Vector3(ObiAnimObj.transform.localPosition.x, -0.10f, ObiAnimObj.transform.localPosition.z))
        {
            Floating = true;
        }

        if (Floating)
        {
            ObiAnimObj.transform.localPosition = Vector3.MoveTowards(ObiAnimObj.transform.localPosition, new Vector3(ObiAnimObj.transform.localPosition.x, 0.10f, ObiAnimObj.transform.localPosition.z), FloatingSpeed * Time.deltaTime);
        }

        else
        {
            ObiAnimObj.transform.localPosition = Vector3.MoveTowards(ObiAnimObj.transform.localPosition, new Vector3(ObiAnimObj.transform.localPosition.x, -0.10f, ObiAnimObj.transform.localPosition.z), FloatingSpeed * Time.deltaTime);
        }
        if (!Salto)
        {
            switch (State)
            {

                case ObiStates.RUTA1:

                    float Dist1 = Vector3.Distance(transform.position, R1[CureentWayPoint].transform.position);
                    LookAt(R1[CureentWayPoint]);
                    if (Dist1 < Radius)
                    {
                        CureentWayPoint++;
                        if (CureentWayPoint > R1.Count - 1)
                        {
                            CureentWayPoint = 0;
                            ChangeState(ObiStates.STOP1);
                        }
                    }

                    break;

                case ObiStates.RUTA2:

                    LookAt(R2[CureentWayPoint]);

                    float Dist2 = Vector3.Distance(transform.position, R2[CureentWayPoint].transform.position);
                    if (Dist2 < Radius)
                    {
                        CureentWayPoint++;
                        if (CureentWayPoint > R2.Count - 1)
                        {
                            CureentWayPoint = 0;
                            ChangeState(ObiStates.STOP2);
                        }
                    }

                    break;

                case ObiStates.RUTA3:

                    LookAt(R3[CureentWayPoint]);

                    float Dist3 = Vector3.Distance(transform.position, R3[CureentWayPoint].transform.position);
                    if (Dist3 < Radius)
                    {
                        CureentWayPoint++;
                        if (CureentWayPoint > R3.Count - 1)
                        {
                            CureentWayPoint = 0;
                            ChangeState(ObiStates.STOP3);
                        }
                    }

                    break;

                case ObiStates.STOP1:

                    float Dist4 = Vector3.Distance(transform.position, STOPS[0].transform.position);
                    LookAt(STOPS[0]);
                    if (Dist4 < Radius)
                    {
                        StopClock += Time.deltaTime;

                        if (StopClock > 3)
                        {
                            ChangeState(ObiStates.AVISO);
                            StopClock = 0;
                        }
                    }

                    break;

                case ObiStates.STOP2:

                    float Dist5 = Vector3.Distance(transform.position, STOPS[1].transform.position);
                    LookAt(STOPS[1]);
                    if (Dist5 < Radius)
                    {
                        StopClock += Time.deltaTime;

                        if (StopClock > 3)
                        {
                            ChangeState(ObiStates.AVISO);
                            StopClock = 0;
                        }
                    }

                    break;

                case ObiStates.STOP3:

                    float Dist6 = Vector3.Distance(transform.position, STOPS[2].transform.position);
                    LookAt(STOPS[2]);
                    if (Dist6 < Radius)
                    {
                        StopClock += Time.deltaTime;

                        if (StopClock > 3)
                        {
                            ChangeState(ObiStates.AVISO);
                            StopClock = 0;
                        }
                    }

                    break;

                case ObiStates.AVISO:

                    float Dist7 = Vector3.Distance(transform.position, STOPS[3].transform.position);
                    if (Dist7 < Radius)
                    {
                        StopClock += Time.deltaTime;
                        LookAtCamera(STOPS[4]);
                        if (StopClock > 6)
                        {
                            int RandomNum;
                            RandomNum = Random.Range(1, 4);

                            if (RandomNum == 1)
                            {
                                ChangeState(ObiStates.RUTA1);
                            }

                            if (RandomNum == 2)
                            {
                                ChangeState(ObiStates.RUTA2);
                            }

                            if (RandomNum == 3)
                            {
                                ChangeState(ObiStates.RUTA3);
                            }

                            StopClock = 0;
                        }
                    }
                    else
                    {
                        LookAt(STOPS[3]);
                    }

                    break;


            }
        } 
        else
        {
            RutaObiSalto();
        }
    }

    private void LookAt(GameObject obj)
    {       
        transform.position = Vector3.MoveTowards(transform.position, obj.transform.position, Speed * Time.deltaTime);
        Vector3 Dir = obj.transform.position - transform.position;
        float step = RSpeed * Time.deltaTime;
        Vector3 newDir = Vector3.RotateTowards(transform.forward, Dir, step, 0.0F);
        transform.rotation = Quaternion.LookRotation(newDir);
    }

    private void LookAtCamera(GameObject obj)
    {
        Vector3 Dir = obj.transform.position - transform.position;
        float step = RSpeed * Time.deltaTime;
        Vector3 newDir = Vector3.RotateTowards(transform.forward, Dir, step, 0.0F);
        transform.rotation = Quaternion.LookRotation(newDir);
    }

    public void ChangeState(ObiStates NewState)
    {
        State = NewState;
        Manager.InstantiateSFX(NewState); 
        if(NewState==ObiStates.JR5)
        {
            transform.position = RJump[3].transform.position;
        }
    } 

    public void RutaObiSalto()
    {
        switch (State)
            {

            case ObiStates.INICIO_SALTO://nos avisa de que hemos seleccionado un salto y que va a activar el portal
                //print(ObiStates.INICIO_SALTO);
                CureentWayPoint = 0;
                LookAtCamera(STOPS[4]);
                StartCoroutine(ChangeStateJump(3.5f, ObiStates.JR1));
                break;

            case ObiStates.JR1://se dirije a un panel y empieza a utilizar el teclado
                //print(ObiStates.JR1);
                LookAt(RJump[CureentWayPoint]);
                float Dist = Vector3.Distance(transform.position, RJump[0].transform.position);
                if (Dist < Radius)
                {
                    float Dist_1 = Vector3.Distance(transform.position, STOPS[0].transform.position);
                    LookAt(STOPS[0]);
                    if (Dist_1 < Radius)
                    {
                        StartCoroutine(ChangeStateJump(2.5f, ObiStates.JR2));
                    }    
                }
                    break;
            case ObiStates.JR2://Obi comenta algo mientras las luces del Lab bajan de intensidad
                //print(ObiStates.JR2);
                StartCoroutine(ChangeStateJump(10.5f, ObiStates.JR3));
                Manager.ColumnaLightDown();
                break;
            case ObiStates.JR3://Obi voltea y comenta algo mientras la celula se activa y aumenta la intensidad de las luces del lab
                //print(ObiStates.JR3);
                LookAtCamera(STOPS[4]);
                StartCoroutine(ChangeStateJump(7.5f, ObiStates.JR4)); 
                
                CureentWayPoint = 1;
                break;
            case ObiStates.JR4://Obi se dirije a la puerta de salida del Lab mientras se cierra la cristalera
                //print(ObiStates.JR4);
                //print(CureentWayPoint);
                float Dist1 = Vector3.Distance(transform.position, RJump[CureentWayPoint].transform.position);
                LookAt(RJump[CureentWayPoint]);
                if (Dist1 < Radius)
                { 
                    if(CureentWayPoint<2)
                    {
                        CureentWayPoint++;
                    }
                    else
                    {
                        StartCoroutine(ChangeStateJump(0.5f, ObiStates.JR5));
                        transform.position = RJump[3].transform.position;
                        ChangeState(ObiStates.JR5);
                        CureentWayPoint = 4; 
                    }

                }
                break;
            case ObiStates.JR5://Obi desciende desde el techo de la sala del portal
                //print(ObiStates.JR5);
                //float Dist2 = Vector3.Distance(transform.position, RJump[5].transform.position); 
                Vector3 Dir = VR_CAM.transform.position - transform.position;
                float step = RSpeed * Time.deltaTime;
                Vector3 newDir = Vector3.RotateTowards(transform.forward, Dir, step, 0.0F);
                transform.rotation = Quaternion.LookRotation(VR_CAM.transform.position);
                transform.position = Vector3.MoveTowards(transform.position, RJump[4].transform.position, Speed * Time.deltaTime); 
                if(transform.position == RJump[4].transform.position)
                {
                    StartCoroutine(ChangeStateJump(1f, ObiStates.JR6));
                }
                break;
            case ObiStates.JR6://Obi se dirije hacia nosotros; Se oye una sirena y como el portal se activa
                //print(ObiStates.JR6);
                float Dist2 = Vector3.Distance(transform.position, RJump[5].transform.position);
                LookAt(RJump[5]);
                if (Dist2 <= Radius)
                {
                    StartCoroutine(ChangeStateJump(9F, ObiStates.RELOAD));
                    Movidito.enabled = true;
                    GameObject NewSilla = GameObject.Find("SillaPlayer");
                    transform.parent = NewSilla.transform;
                }
                break;
            case ObiStates.RELOAD://La sila se eleva y nos adentramos dentro del portal
                Movidito.enabled = false;
                GameObject NewSilla2 = GameObject.Find("SillaPlayer");
                transform.parent = NewSilla2.transform;
                Manager.Silla.SetBool("Viajar", true);
                break;
        }
    }

    IEnumerator ChangeStateJump(float Time, ObiStates State)
    {
        yield return new WaitForSeconds(Time); 
        ChangeState(State); 
   
    }
}

